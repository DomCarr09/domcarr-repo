#!/usr/bin/env python3

import rospy
import math
import numpy
from math import radians, sin, cos
from duckietown_msgs.msg import Vector2D

class Listener:
 def __init__(self):
  rospy.Subscriber("/sensor_coord",duckietown_msgs/Vector2D,self.callback)
  
  self.pub = rospy.Publisher('/robot_coord',Vector2D, queue_size=10)
  self.pub_msg = Vector2D()
  self.robotinitial = [[5],[3],[1]]
  self.pointA = [[18],[12],[1]]
  self.pointB = [[1],[-7],[1]]
  self.pointC = [[-12],[7],[1]]
  self.pointD = [[-5],[15],[1]]
  self.Trs = numpy.matrix([-1,0,-1],[0,-1,0],[0,0,1])
  self.Twr = numpy.matrix([-sqrt(2)/2,-sqrt(2)/2,5],[sqrt(2)/2,-sqrt(2)/2,3],[0,0,1])
  self.Tws = numpy.matrix([-1,0,-1],[0,-1,0],[0,0,1]) %%Don't forget to change
  
  self.pub = rospy.Publisher('/world_coord',Vector2D, queue_size=10)
  
 
 def callback(self,msg):
  rospy.logwarn("Transform from sensor to robot")
  self.pub_msg.value = self.Trs
  self.pub.publish(self.pub_msg)
  
  rospy.logwarn("Transform from robot to world")
  self.pub_msg.value = self.Twr
  self.pub.publish(self.pub_msg)
  
  rospy.logwarn("Transform from sensor to world")
  self.pub_msg.value = self.Tws
  self.pub.publish(self.pub_msg)
  
  rospy.logwarn("Position A relative to robot")
  self.Pra = Trs*pointA
  self.pub_msg.value = self.Pra
  self.pub.publish(self.pub_msg)
  
  rospy.logwarn("Position B relative to robot")
  self.Prb = Trs*pointB
  self.pub_msg.value = self.Prb
  self.pub.publish(self.pub_msg)
  
  rospy.logwarn("Position C relative to robot")
  self.Prc = Trs*pointC
  self.pub_msg.value = self.Prc
  self.pub.publish(self.pub_msg)
  
  rospy.logwarn("Position D relative to robot")
  self.Prd = Trs*pointD
  self.pub_msg.value = self.Prd
  self.pub.publish(self.pub_msg)
  
  rospy.logwarn("Position A relative to world")
  self.Pwa = Twr*pointA
  self.pub_msg.value = self.Pwa
  self.pub.publish(self.pub_msg)
  
  rospy.logwarn("Position B relative to world")
  self.Pwb = Twr*pointB
  self.pub_msg.value = self.Pwb
  self.pub.publish(self.pub_msg)
  
  rospy.logwarn("Position C relative to world")
  self.Pwc = Twr*pointC
  self.pub_msg.value = self.Pwc
  self.pub.publish(self.pub_msg)
  
  rospy.logwarn("Position D relative to world")
  self.Pwd = Twr*pointD
  self.pub_msg.value = self.Pwd
  self.pub.publish(self.pub_msg)
  
  
if __name__ == '__main__':
 rospy.init_node('listener', anonymous=True)
 Listener()
 
 rospy.spin()
